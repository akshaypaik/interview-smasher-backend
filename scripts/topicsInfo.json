[
    {
        "topicName": "closures",
        "topicDisplayName": "Closures",
        "description": "A closure gives a function access to all variables of its parent function even after that parent function is returned. The function keeps a reference to its outer scope which preserves the scope chain throughout time.",
        "codeSnippet": "const secureBooking = function () {\n    let passengerCount = 0;\n    return function(){  // any function always has access to variable environment of execution context in which function is created even after that execution context is gone\n        passengerCount++;\n        console.log(\"passengerCount: \", passengerCount);\n    }\n}\n\nconst booker = secureBooking();\nbooker();\nbooker();\nbooker();\n\n// A closure gives a function access to all variables of its parent function even after that parent function is returned.\n// The function keeps a reference to its outer scope which preserves the scope chain throughout time.",
        "module": "basics",
        "courseId": 1,
        "topicId": 1
    },
    {
        "topicName": "thisKeyword",
        "topicDisplayName": "This Keyword",
        "description": "The behavior of the 'this' keyword depends on the execution context, whether in global scope, inside functions, object methods, or arrow functions. It also behaves differently in strict and non-strict mode. If the value of this keyword is undefined or null, this keyword will be replaced with globalObject only in non strict mode",
        "codeSnippet": "\"use strict\" // this keyword behaves differently in strict mode and non strict mode.\n\n// this in global space\nconsole.log(this);  // global object (browser - window, nodejs - global) (depends on js runtime)\n\n// this inside a function\nfunction x() {\n    console.log(this);\n}\n\nx();    // undefined in strict mode\n\n// this inside an object's method\nconst obj = {\n    name: \"akshay\",\n    age: 30,\n    print: function (city) {\n        console.log(this);\n        console.log(`my name is ${this.name} and I belong to ${city}`);\n    }\n}\n\nobj.print(\"bangalore\");\n\n// call, apply, and bind methods\nconst obj2 = { name: \"radhe\", age: 28 };\nobj.print.call(obj2, \"bangalore\");\n\nconst obj3 = { name: \"kavitha\", age: 62 };\nobj.print.apply(obj3, [\"bangalore\"]);\n\nconst obj4 = { name: \"krishnadas\", age: 66 };\nconst result = obj.print.bind(obj4);\nresult(\"bangalore\");\n\n// this inside arrow functions\nconst objGlobalArrow = {\n    name: \"akshay\",\n    print: () => {\n        console.log(`my arrow name is ${this.name}`);   \n    }\n}\nobjGlobalArrow.print(); // 'this' is undefined\n\nconst objArrow = {\n    name: \"krishnadas\",\n    child: function () {\n        const printName = () => {\n            console.log(`my arrow name is ${this.name}`);\n        }\n        printName();\n    }\n}\nobjArrow.child();\n\n// this inside DOM elements => reference to HTML element",
        "module": "basics",
        "courseId": 1,
        "topicId": 2
    },
    {
        "topicName": "arrayFilter",
        "topicDisplayName": "Array Filter",
        "description": "The filter() method of Array instances creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.",
        "codeSnippet": "const numbersArray = [2, 25, 15, 45, 36, 91, 16, 29, 43, 52, 63, 78, 81, 99, 104];\n\n// filter returns new array\nconst newNumbersArray = numbersArray.filter(item => item > 80);\nconsole.log(\"newNumbersArray: \", newNumbersArray);  // [ 91, 81, 99, 104 ]\nconsole.log(\"numbersArray: \", numbersArray);    // [2, 25, 15, 45, 36, 91, 16, 29, 43, 52, 63, 78, 81, 99, 104] does not mutate the original array",
        "module": "arrays",
        "courseId": 1,
        "topicId": 3
    },
    {
        "topicName": "reactHooks",
        "topicDisplayName": "React Hooks",
        "description": "React Hooks are functions that let you use React features (like state and lifecycle methods) in functional components, offering a simpler and more efficient way to manage component logic compared to class components.",
        "codeSnippet": "// Most important 2 hooks \n// useState() - super powerful local state variable in React\n// useEffect()\n\n// useState core concepts\n// - useState variables are declared like:\n//   const [name, setName] = useState(\"akshay\");\n// - \"akshay\" is the default value for name.\n// - useState returns an array where the first element is the variable,\n//   and the second element is a function to update that variable.\n// - React re-renders the component whenever this variable changes,\n//   using the diff algorithm to check for changes.\n\n// useEffect core concepts\n// - If no dependency array => useEffect is called on every component render \n// - If dependency array is empty = [] => useEffect is called only once (on initial render)  \n// - If dependency array is [isLoggedIn] => useEffect runs every time isLoggedIn updates\nuseEffect(() => {\n    console.log(\"useEffect called\");\n}, []);\n\n// Cleaning up resources when a component unmounts\nuseEffect(() => {\n    const timer = setInterval(() => {\n        console.log(\"React is OP\");\n    }, 1000);\n    \n    // Clear timer in return function\n    return () => {\n        clearTimeout(timer);\n    };\n}, []);",
        "module": "basics",
        "courseId": 4,
        "topicId": 4
    },
    {
        "topicName": "reconciliationAlgorithm",
        "topicDisplayName": "Reconciliation Algorithm",
        "description": "In the context of front-end frameworks like React, a reconciliation algorithm is the process of comparing a new virtual DOM with the previous one and efficiently updating only the parts of the real DOM that have changed. This optimization helps improve performance by minimizing unnecessary DOM manipulations.",
        "codeSnippet": "// React uses the Reconciliation Algorithm, also known as React Fiber (introduced in React 16)\n// Virtual DOM is a representation of the Actual DOM\n// Virtual DOM consists of React Elements (JS objects)\n// console.log(<Component />) outputs a React Element, which is a normal JS object\n\n// Diff Algorithm:\n// - Finds the difference between the updated Virtual DOM and the previous Virtual DOM\n// - Updates only the necessary parts of the actual DOM instead of re-rendering everything\n\n// Example:\n// Suppose there are 15 restaurants initially loaded in a component.\n// When the user clicks the 'Top Rated' filter button, the restaurant data updates to only 7 restaurants.\n// React creates a new Virtual DOM object with these 7 restaurants.\n// The Diff Algorithm compares the new 7-restaurant Virtual DOM with the old 15-restaurant Virtual DOM.\n// React then updates only the necessary parts of the Actual DOM efficiently.",
        "module": "advanced",
        "courseId": 4,
        "topicId": 5
    },
    {
        "topicName": "classBasedComponent",
        "topicDisplayName": "Class Based Component",
        "description": "Before React 16.8, Class components were the only way to track state and lifecycle on a React component. Function components were considered 'state-less'.",
        "codeSnippet": "import React from \"react\";\nimport UserClass from \"./User/User\";\n\nclass ContactClass extends React.Component {\n\n    // React class-based component lifecycle flow:\n    // 1. Constructor is called\n    // 2. Render method is called\n    // 3. componentDidMount is called\n\n    // If a component has a child component, the lifecycle flow is:\n    // 1. Parent constructor\n    // 2. Parent render\n    // 3. Child constructor\n    // 4. Child render\n    // 5. Child componentDidMount\n    // 6. Parent componentDidMount\n\n    // If a component has multiple child components, React batches renders:\n    // 1. Parent constructor\n    // 2. Parent render\n    // 3. First child's constructor\n    // 4. First child's render\n    // 5. Second child's constructor\n    // 6. Second child's render\n    // 7. First child's componentDidMount\n    // 8. Second child's componentDidMount\n    // 9. Parent componentDidMount\n\n    constructor(props) {\n        super(props);\n        console.log(\"parent constructor called\");\n    }\n\n    componentDidMount() {\n        console.log(\"parent component did mount called\");\n    }\n\n    render() {\n        console.log(\"parent render called\");\n        return (\n            <div>\n                <UserClass name=\"Akshay Pai\" />\n                {/* <UserClass name=\"Radhe Pai\" /> Uncomment to test multiple children behavior */}\n            </div>\n        );\n    }\n}\n\nexport default ContactClass;",
        "module": "basics",
        "courseId": 4,
        "topicId": 6
    },
    {
        "topicName": "arrayFlatMethod",
        "topicDisplayName": "Array Flat Method",
        "description": "The flat() method of Array instances creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
        "codeSnippet": "const arr = [1, [2, [3, [4]]]];\n\nconsole.log(arr.flat(1)); // Output: [1, 2, [3, [4]]]\nconsole.log(arr.flat(2)); // Output: [1, 2, 3, [4]]\nconsole.log(arr.flat(3)); // Output: [1, 2, 3, 4]\n\nconst arr2 = [1, [2, [3, [4]]]];\nconsole.log(arr2.flat(Infinity)); // Output: [1, 2, 3, 4]\n\n// Polyfill for Older Environments:\nfunction flatten(arr3, depth = 1) {\n  return depth > 0\n    ? arr3.reduce((flat, item) => flat.concat(Array.isArray(item) ? flatten(item, depth - 1) : item), [])\n    : arr3.slice();\n}\n\nconst arr3 = [1, [2, [3, [4]]]];\nconsole.log(flatten(arr3, 2)); // Output: [1, 2, 3, [4]]",
        "module": "arrays",
        "courseId": 1,
        "topicId": 7
    },
    {
        "topicName": "arrayReduceMethod",
        "topicDisplayName": "Array Reduce Method",
        "description": "The reduce() method of Array instances executes a user-supplied 'reducer' callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.",
        "codeSnippet": "const numbers = [2, 5, 3];\n\n// total is a new variable initialized with 0 and number is each element we loop through numbers\nconst sum = numbers.reduce((total, number) => {\n    return total = total + number;\n}, 0);\n\nconsole.log(\"numbers: \", numbers);  // [2, 5, 3]\nconsole.log(\"total sum: \", sum);    // 10\n\n// **************************************************************************************************************\n\nconst bankTransactions = [250, 500, 340, 750, -800, 1500, 2100, 3600, 800, -150, -750, -360];\n// I want to count how many deposits are more than 1000 rs\n// We can achieve this using reduce.\nconst numDepositThousand = bankTransactions.reduce((acc, sum) => {\n    acc = sum >= 1000 ? acc + 1 : acc;\n    return acc;\n}, 0); \nconsole.log(\"numDepositThousand: \", numDepositThousand);    // Output: 3\n\n// I want to get the total deposit and withdrawal amounts\n// acc.withdrawals += sum; is a shorthand for acc.withdrawals = acc.withdrawals + sum;\nconst sums = bankTransactions.reduce((acc, sum) => {\n    sum > 0 ? acc.deposits = acc.deposits + sum : acc.withdrawals += sum;\n    return acc;\n}, { deposits: 0, withdrawals: 0 });\n\nconsole.log(`Amount of deposits is ${sums.deposits} and withdrawals is ${sums.withdrawals}`);   \n// Output: Amount of deposits is 9840 and withdrawals is -2060",
        "module": "arrays",
        "courseId": 1,
        "topicId": 8
    },
    {
        "topicName": "arraySliceSpliceReverseMethods",
        "topicDisplayName": "Array Slice, Splice, Reverse Methods",
        "description": "The splice() method of Array instances changes the contents of an array by removing or replacing existing elements and/or adding new elements in place. \n The slice() method of Array instances returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified. \n The reverse() method of Array instances reverses an array in place and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first.",
        "codeSnippet": "const arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n\n// Slice\nconsole.log(\"Slice\");\nconsole.log(arr.slice(2)); // \"c\", \"d\", \"e\"  gives element from 2 start index\nconsole.log(arr);   // [IMPORTANT] slice does not mutate the original array\nconsole.log(arr.slice(1, 4)); // \"b\", \"c\", \"d\"   gives elements from index 1 to 4 (excluding 4)\nconsole.log(arr.slice(-2)); // \"d\", \"e\"      gives last 2 elements if -2 is passed\nconsole.log(arr.slice(-1)); // \"e\"       gives last element if -1 is passed\nconsole.log(arr.slice(1, -2)); // \"b\", \"c\"   gives elements from index 1 except last 2 elements (-2)\nconsole.log(arr.slice()); // Shallow copy of array\n\n// Splice\nconsole.log(\"Splice\");\nconsole.log(arr);   // [ 'a', 'b', 'c', 'd', 'e' ]\nconsole.log(arr.splice(2)); // removes elements from index 2 -> [ 'c', 'd', 'e' ]\nconsole.log(arr);   // [ 'a', 'b' ] [IMPORTANT] splice mutates the original array\nconsole.log(arr.splice(-1)); // removes last element -> [ 'b' ]\nconsole.log(arr);   // [ 'a' ]\narr.push(...['b', 'c', 'd', 'e']);\nconsole.log(arr);   // added back elements -> [ 'a', 'b', 'c', 'd', 'e' ]\nconsole.log(arr.splice(2, 2)); // removes 2 elements from index 2 -> [ 'c', 'd' ]\nconsole.log(arr);\n\n// Reverse\nconsole.log(\"Reverse\");\nconst arr2 = [\"a\", \"b\", \"c\"];\nconsole.log(arr2.reverse());    // [ 'c', 'b', 'a' ] [IMPORTANT] reverse mutates the original array\n\n// New At Method\nconst arr3 = [12, 24, 36];\nconsole.log(arr3.at(1)); // gives element at index 1 -> 24\nconsole.log(arr3.at(-1)); // gives last element -> 36",
        "module": "arrays",
        "courseId": 1,
        "topicId": 9
    },
    {
        "topicName": "arraySomeAndEvery",
        "topicDisplayName": "Array Some and Every Methods",
        "description": "The some() method of Array instances tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array. \n The every() method of Array instances tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.",
        "codeSnippet": "const deposits = [200, 150, -250, 485, 640, 852, -412, 350];\n\n// some() - checks if at least one element meets the condition\nconst anyPositiveDeposits = deposits.some(item => item > 0);\nconsole.log(\"anyPositiveDeposits: \", anyPositiveDeposits); // true\n\n// Loan approval based on deposit criteria (10% of requested amount)\nconst requestedLoanAmount = 50000;\nconst isLoanCreteriaMet = deposits.some(item => {\n    const tenPercentOfLoan = (requestedLoanAmount / 100) * 10;\n    console.log(\"tenPercentOfLoan: \", tenPercentOfLoan);\n    return item >= tenPercentOfLoan;\n});\nconsole.log(`Loan ${isLoanCreteriaMet ? 'granted' : 'declined'} for amount ${requestedLoanAmount}`);\n\n// every() - checks if all elements meet the condition\nconst allDepositsPositive = deposits.every(item => item > 0);\nconsole.log(\"allDepositsPositive: \", allDepositsPositive); // false\n\nconst positiveDepositAccount = [200, 4550, 247, 698, 150];\nconst allDepositsPositive2 = positiveDepositAccount.every(item => item > 0);\nconsole.log(\"allDepositsPositive2: \", allDepositsPositive2); // true",
        "module": "arrays",
        "courseId": 1,
        "topicId": 10
    },
    {
        "topicName": "arraySorting",
        "topicDisplayName": "Array Sorting",
        "description": "The sort() method of Array instances sorts the elements of an array in place and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code unit values.",
        "codeSnippet": "// Strings\nconst owners = ['Krishnadas', 'Akshay', 'Radhe', 'Kavitha'];\nconsole.log(owners.sort()); // [IMPORTANT] mutates the original array -> [ 'Akshay', 'Kavitha', 'Krishnadas', 'Radhe' ]\nconsole.log(owners);    // [ 'Akshay', 'Kavitha', 'Krishnadas', 'Radhe' ]\n\n// Numbers\nconst deposits = [200, 150, -250, 485, 640, 852, -412, 350];\n// sort() does sorting based on strings (converts everything to string before sorting)\n// console.log(deposits.sort());   // Not what we expected - does not work correctly and mutates the original array\n// console.log(deposits);\n\n// Sorting logic\n// return < 0 -> A comes before B (keep order)\n// return > 0 -> B comes before A (switch order)\n// return 1 means switch the order\n\n// Ascending Order\n// deposits.sort((a,b) => {\n//     if (a > b) return 1;\n//     if (a < b) return -1;\n// });\ndeposits.sort((a, b) => {\n    return a - b;\n});\nconsole.log(deposits);\n\n// Descending Order\n// deposits.sort((a,b) => {\n//     if (a > b) return -1;\n//     if (a < b) return 1;\n// });\ndeposits.sort((a, b) => {\n    return b - a;\n});\nconsole.log(deposits);\n\n// Avoid Mutating the Original Array\nconst depositsNotToBeChanged = [200, 150, -250, 485, 640, 852, -412, 350];\n// Use slice() to create a copy of the array before sorting to prevent mutation\nconst sortedDeposits = depositsNotToBeChanged.slice().sort((a, b) => {\n   return a - b;\n});\n\nconsole.log(\"depositsNotToBeChanged: \", depositsNotToBeChanged);\nconsole.log(\"sortedDeposits: \", sortedDeposits);",
        "module": "arrays",
        "courseId": 1,
        "topicId": 11
    },
    {
        "topicName": "nonDestructiveArrayMethods",
        "topicDisplayName": "Non Destructive Array Methods - toReversed, with and toSorted",
        "description": "The toReversed() method of Array instances is the copying counterpart of the reverse() method. It returns a new array with the elements in reversed order. \n The with() method of Array instances is the copying version of using the bracket notation to change the value of a given index. It returns a new array with the element at the given index replaced with the given value.",
        "codeSnippet": "const deposits = [200, 150, -250, 485, 640, 852, -412, 350];\n\nconsole.log(\"deposits: \", deposits);\n\n// reverse() is destructive (mutates the original array)\nconst reverseDeposits = deposits.reverse();\nconsole.log(\"reverseDeposits: \", reverseDeposits);\nconsole.log(\"deposits: \", deposits);\n\nconst deposits2 = [200, 150, -250, 485, 640, 852, -412, 350];\n\nconsole.log(\"deposits2: \", deposits2);\n// toReversed() does not mutate the original array\nconst reverseDeposits2 = deposits2.toReversed();\nconsole.log(\"reverseDeposits2: \", reverseDeposits2);\nconsole.log(\"deposits2: \", deposits2);\n\n// toSorted() and toSpliced() also return new arrays without mutating the original\nconst sortedDeposits = deposits2.toSorted((a, b) => a - b);\nconsole.log(\"sortedDeposits: \", sortedDeposits);\n\n// with() method: creates a copy with a specific index modified\nconsole.log(\"deposits: \", deposits);    \nconst newDeposits = deposits.with(1, 300);  // Replacing index 1 with 300\nconsole.log(\"newDeposits: \", newDeposits);",
        "module": "arrays",
        "courseId": 1,
        "topicId": 12
    },
    {
        "topicName": "arrayShiftUnshift",
        "topicDisplayName": "Array Shift and Unshift Methods",
        "description": "The shift() method of Array instances removes the first element from an array and returns that removed element. This method changes the length of the array. \n The unshift() method of Array instances adds the specified elements to the beginning of an array and returns the new length of the array.",
        "codeSnippet": "let arr = [1, 2, 3, 4, 5];\n\n// unshift() adds an element at the beginning and returns the new length\narr.unshift(0);\nconsole.log(arr);   // [0, 1, 2, 3, 4, 5]\n\n// shift() removes the first element and returns it\nconst removedElement = arr.shift();\nconsole.log(removedElement); // 0\nconsole.log(arr);  // [1, 2, 3, 4, 5]",
        "module": "arrays",
        "courseId": 1,
        "topicId": 13
    },
    {
        "topicName": "dynamicallyCreatingArrays",
        "topicDisplayName": "Dynamically Creating Arrays",
        "description": "The Array.from() static method creates a new, shallow-copied Array instance from an iterable or array-like object. \n The keys() method of Array instances returns a new array iterator object that contains the keys for each index in the array.",
        "codeSnippet": "// Using Array.from() to create an array of length 20 with values from 0 to 19\nconst arr = Array.from({ length: 20 }, (_, index) => index);\nconsole.log(arr);   // [0, 1, 2, ..., 19]\n\n// Using Array().keys() and spread operator to create an array from 1 to 20\nconst arr2 = [...Array(20).keys()].map((item, index) => index + 1);\nconsole.log(arr2);  // [1, 2, 3, ..., 20]",
        "module": "arrays",
        "courseId": 1,
        "topicId": 14
    },
    {
        "topicName": "arrayDestructuring",
        "topicDisplayName": "Array Destructuring",
        "description": "Array destructuring is a convenient way of extracting multiple values from arrays and assigning them to variables. It allows unpacking values from arrays or properties from objects into distinct variables.",
        "codeSnippet": "// Basic array destructuring\nconst numbers = [1, 2, 3];\nconst [a, b, c] = numbers;\nconsole.log(a, b, c);  // 1 2 3\n\n// Skipping items in destructuring\nconst [x, , z] = numbers;\nconsole.log(x, z);     // 1 3",
        "module": "arrays",
        "courseId": 1,
        "topicId": 15
    },
    {
        "topicName": "arrayMapMethod",
        "topicDisplayName": "Array.map() Method",
        "description": "The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.",
        "codeSnippet": "// Using map to double each number in an array\nconst numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled);  // [2, 4, 6, 8]",
        "module": "arrays",
        "courseId": 1,
        "topicId": 16
    },
    {
        "topicName": "arrayIncludesMethod",
        "topicDisplayName": "Array.includes() Method",
        "description": "The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.",
        "codeSnippet": "// Check if an array contains a value\nconst fruits = ['apple', 'banana', 'mango'];\nconsole.log(fruits.includes('banana'));  // true\nconsole.log(fruits.includes('grape'));   // false",
        "module": "arrays",
        "courseId": 1,
        "topicId": 17
    },
    {
        "topicName": "arrayFindMethod",
        "topicDisplayName": "Array.find() Method",
        "description": "The find() method returns the first element in the provided array that satisfies the provided testing function.",
        "codeSnippet": "// Find the first number greater than 10\nconst numbers = [4, 9, 16, 25];\nconst first = numbers.find(num => num > 10);\nconsole.log(first);  // 16",
        "module": "arrays",
        "courseId": 1,
        "topicId": 18
    },
    {
        "topicName": "arrayJoinMethod",
        "topicDisplayName": "Array.join() Method",
        "description": "The join() method joins all elements of an array into a string, using a specified separator.",
        "codeSnippet": "// Join array elements into a string\nconst words = ['Hello', 'world'];\nconst sentence = words.join(' ');\nconsole.log(sentence);  // 'Hello world'",
        "module": "arrays",
        "courseId": 1,
        "topicId": 19
    },
    {
        "topicName": "arrayAtMethod",
        "topicDisplayName": "Array.at() Method",
        "description": "The at() method takes an integer value and returns the item at that index, allowing negative numbers for reverse indexing.",
        "codeSnippet": "// Access elements using at()\nconst numbers = [10, 20, 30, 40];\nconsole.log(numbers.at(-1));  // 40",
        "module": "arrays",
        "courseId": 1,
        "topicId": 20
    },
    {
        "topicName": "functionDeclaration",
        "topicDisplayName": "Function Declaration",
        "description": "Function declarations are one of the basic ways to define reusable blocks of code in JavaScript. They are hoisted and can be called before they are defined in code.",
        "codeSnippet": "// Function declaration\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\nconsole.log(greet('Alice'));  // Hello, Alice!",
        "module": "functions",
        "courseId": 1,
        "topicId": 21
    },
    {
        "topicName": "arrowFunctions",
        "topicDisplayName": "Arrow Functions",
        "description": "Arrow functions provide a shorter syntax for writing functions and do not bind their own 'this', making them great for callbacks.",
        "codeSnippet": "// Arrow function example\nconst add = (a, b) => a + b;\nconsole.log(add(5, 3));  // 8",
        "module": "functions",
        "courseId": 1,
        "topicId": 22
    },
    {
        "topicName": "objectDestructuring",
        "topicDisplayName": "Object Destructuring",
        "description": "Object destructuring allows you to unpack values from objects into distinct variables.",
        "codeSnippet": "// Destructuring an object\nconst user = { name: 'Bob', age: 30 };\nconst { name, age } = user;\nconsole.log(name, age);  // Bob 30",
        "module": "objects",
        "courseId": 1,
        "topicId": 23
    },
    {
        "topicName": "optionalChaining",
        "topicDisplayName": "Optional Chaining",
        "description": "Optional chaining (?.) allows you to safely access deeply nested properties without having to check for null or undefined.",
        "codeSnippet": "// Safe property access using optional chaining\nconst user = { profile: { name: 'Alice' } };\nconsole.log(user?.profile?.name);  // Alice\nconsole.log(user?.address?.city);  // undefined",
        "module": "objects",
        "courseId": 1,
        "topicId": 24
    },
    {
        "topicName": "forOfLoop",
        "topicDisplayName": "for...of Loop",
        "description": "The for...of statement creates a loop iterating over iterable objects like arrays, strings, maps, etc.",
        "codeSnippet": "// Looping through an array using for...of\nconst fruits = ['apple', 'banana', 'mango'];\nfor (const fruit of fruits) {\n  console.log(fruit);\n}",
        "module": "loops",
        "courseId": 1,
        "topicId": 25
    },
    {
        "topicName": "forInLoop",
        "topicDisplayName": "for...in Loop",
        "description": "The for...in loop iterates over the enumerable properties of an object.",
        "codeSnippet": "// Looping through object properties\nconst user = { name: 'Alice', age: 25 };\nfor (const key in user) {\n  console.log(`${key}: ${user[key]}`);\n}",
        "module": "loops",
        "courseId": 1,
        "topicId": 26
    },
    {
        "topicName": "asyncAwait",
        "topicDisplayName": "Async/Await",
        "description": "Async/Await provides a more readable way to work with asynchronous code. It allows writing asynchronous code that looks synchronous.",
        "codeSnippet": "// Using async/await\nasync function fetchData() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n  const data = await response.json();\n  console.log(data);\n}\nfetchData();",
        "module": "promises",
        "courseId": 1,
        "topicId": 27
    },
    {
        "topicName": "promiseBasic",
        "topicDisplayName": "JavaScript Promises",
        "description": "A Promise is an object representing the eventual completion or failure of an asynchronous operation.",
        "codeSnippet": "// Creating and using a promise\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('Data loaded!'), 1000);\n});\npromise.then(data => console.log(data));",
        "module": "promises",
        "courseId": 1,
        "topicId": 28
    }
]